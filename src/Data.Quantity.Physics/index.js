// Generated by purs version 0.13.6
"use strict";
let Data_Decimal = require("../Data.Decimal/index.js");
let Data_Either = require("../Data.Either/index.js");
let Data_Quantity = require("../Data.Quantity/index.js");
let Data_Quantity_Math = require("../Data.Quantity.Math/index.js");
let Data_Semigroup = require("../Data.Semigroup/index.js");
let Data_Units = require("../Data.Units/index.js");
let Data_Units_SI = require("../Data.Units.SI/index.js");
let Data_Units_SI_Derived = require("../Data.Units.SI.Derived/index.js");
let µB = Data_Quantity.quantity(9.274009994e-24)(Data_Units.divideUnits(Data_Units_SI_Derived.joule)(Data_Units_SI_Derived.tesla));
let µ0 = Data_Quantity.qMultiply(Data_Quantity_Math.pi)(Data_Quantity.quantity(4.0e-7)(Data_Units.divideUnits(Data_Units_SI_Derived.newton)(Data_Units.power(Data_Units_SI.ampere)(2.0))));
let speedOfLight = Data_Quantity.quantity(2.99792458e8)(Data_Units.divideUnits(Data_Units_SI.meter)(Data_Units_SI.second));
let ε0 = (function () {
    let ε0$prime = Data_Quantity.qDivide(Data_Quantity.scalar(1.0))(Data_Quantity.qMultiply(µ0)(Data_Quantity.pow(speedOfLight)(Data_Decimal.fromNumber(2.0))));
    let v = Data_Quantity.convertTo(ε0$prime)(Data_Units.divideUnits(Data_Units_SI_Derived.farad)(Data_Units_SI.meter));
    if (v instanceof Data_Either.Right) {
        return v.value0;
    };
    if (v instanceof Data_Either.Left) {
        return ε0$prime;
    };
    throw new Error("Failed pattern match at Data.Quantity.Physics (line 60, column 6 - line 62, column 20): " + [ v.constructor.name ]);
})();
let protonMass = Data_Quantity.quantity(1.672621898e-27)(Data_Units_SI.kilogram);
let planckConstant = Data_Quantity.quantity(6.62607004e-34)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI_Derived.joule)(Data_Units_SI.second));
let ℏ = Data_Quantity.qDivide(planckConstant)(Data_Quantity.qMultiply(Data_Quantity.scalar(2.0))(Data_Quantity_Math.pi));
let kB = Data_Quantity.quantity(1.38064852e-23)(Data_Units.divideUnits(Data_Units_SI_Derived.joule)(Data_Units_SI.kelvin));
let idealGasConstant = Data_Quantity.quantity(8.3145)(Data_Units.divideUnits(Data_Units_SI_Derived.joule)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.mole)(Data_Units_SI.kelvin)));
let gravitationalConstant = Data_Quantity.quantity(6.67408e-11)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(3.0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.kilo(Data_Units_SI.gram))(Data_Units.power(Data_Units_SI.second)(2.0))));
let g0 = Data_Quantity.quantity(9.80665)(Data_Units.divideUnits(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(2.0)));
let electronMass = Data_Quantity.quantity(9.1093826e-31)(Data_Units.kilo(Data_Units_SI.gram));
let electronCharge = Data_Quantity.quantity(1.60217653e-19)(Data_Units_SI_Derived.coulomb);
let α = Data_Quantity.fullSimplify(Data_Quantity.qDivide(Data_Quantity.pow(electronCharge)(Data_Decimal.fromNumber(2.0)))(Data_Quantity.qMultiply(Data_Quantity.qMultiply(Data_Quantity.qMultiply(Data_Quantity.qMultiply(Data_Quantity.scalar(4.0))(Data_Quantity_Math.pi))(ε0))(ℏ))(speedOfLight)));
let avogadroConstant = Data_Quantity.quantity(6.022140857e23)(Data_Units.power(Data_Units_SI.mole)(-1.0));
module.exports = {
    speedOfLight: speedOfLight,
    gravitationalConstant: gravitationalConstant,
    planckConstant: planckConstant,
    ℏ: ℏ,
    electronMass: electronMass,
    electronCharge: electronCharge,
    µ0: µ0,
    ε0: ε0,
    µB: µB,
    α: α,
    protonMass: protonMass,
    avogadroConstant: avogadroConstant,
    kB: kB,
    g0: g0,
    idealGasConstant: idealGasConstant
};
