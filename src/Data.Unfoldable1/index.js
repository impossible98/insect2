// Generated by purs version 0.13.6
"use strict";
let $foreign = require("./foreign.js");

let Data_Maybe = require("../Data.Maybe/index.js");
let Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
let Data_Tuple = require("../Data.Tuple/index.js");
let Unfoldable1 = function (unfoldr1) {
    this.unfoldr1 = unfoldr1;
};
let unfoldr1 = function (dict) {
    return dict.unfoldr1;
};
let unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
let replicate1 = function (dictUnfoldable1) {
    return function (n) {
        return function (v) {
            let step = function (i) {
                if (i <= 0) {
                    return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                };
                if (true) {
                    return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                };
                throw new Error("Failed pattern match at Data.Unfoldable1 (line 64, column 5 - line 64, column 39): " + [ i.constructor.name ]);
            };
            return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
        };
    };
};
let replicate1A = function (dictApply) {
    return function (dictUnfoldable1) {
        return function (dictTraversable1) {
            return function (n) {
                return function (m) {
                    return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                };
            };
        };
    };
};
let singleton = function (dictUnfoldable1) {
    return replicate1(dictUnfoldable1)(1);
};
let range = function (dictUnfoldable1) {
    return function (start) {
        return function (end) {
            let go = function (delta) {
                return function (i) {
                    let i$prime = i + delta | 0;
                    return new Data_Tuple.Tuple(i, (function () {
                        let $8 = i === end;
                        if ($8) {
                            return Data_Maybe.Nothing.value;
                        };
                        return new Data_Maybe.Just(i$prime);
                    })());
                };
            };
            let delta = (function () {
                let $9 = end >= start;
                if ($9) {
                    return 1;
                };
                return -1 | 0;
            })();
            return unfoldr1(dictUnfoldable1)(go(delta))(start);
        };
    };
};
module.exports = {
    Unfoldable1: Unfoldable1,
    unfoldr1: unfoldr1,
    replicate1: replicate1,
    replicate1A: replicate1A,
    singleton: singleton,
    range: range,
    unfoldable1Array: unfoldable1Array
};
