// Generated by purs version 0.13.6
"use strict";
let Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
let Data_Maybe = require("../Data.Maybe/index.js");
let Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
let Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
let Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
let Data_String_Unsafe = require("../Data.String.Unsafe/index.js");


function fromNonEmptyString(arg) {
	return arg;
}

function liftS(arg) {
	return arg;
}

function toNonEmptyString(arg) {
	return arg;
}


let snoc = function (c) {
	return function (s) {
		return toNonEmptyString(s + Data_String_CodeUnits.singleton(c));
	};
};
let singleton = function ($13) {
	return toNonEmptyString(Data_String_CodeUnits.singleton($13));
};
let takeWhile = function (f) {
	let $14 = liftS(Data_String_CodeUnits.takeWhile(f));
	return function ($15) {
		return Data_String_NonEmpty_Internal.fromString($14($15));
	};
};
let lastIndexOf$prime = function (pat) {
	let $16 = Data_String_CodeUnits["lastIndexOf'"](pat);
	return function ($17) {
		return liftS($16($17));
	};
};
let lastIndexOf = function ($18) {
	return liftS(Data_String_CodeUnits.lastIndexOf($18));
};
let indexOf$prime = function (pat) {
	let $19 = Data_String_CodeUnits["indexOf'"](pat);
	return function ($20) {
		return liftS($19($20));
	};
};
let indexOf = function ($21) {
	return liftS(Data_String_CodeUnits.indexOf($21));
};

let length = function ($22) {
	return Data_String_CodeUnits.length(fromNonEmptyString($22));
};
let splitAt = function (i) {
	return function (nes) {
		let v = Data_String_CodeUnits.splitAt(i)(fromNonEmptyString(nes));
		return {
			before: Data_String_NonEmpty_Internal.fromString(v.before),
			after: Data_String_NonEmpty_Internal.fromString(v.after)
		};
	};
};
let take = function (i) {
	return function (nes) {
		let s = fromNonEmptyString(nes);
		let $8 = i < 1;
		if ($8) {
			return Data_Maybe.Nothing.value;
		};
		return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.take(i)(s)));
	};
};
let takeRight = function (i) {
	return function (nes) {
		let s = fromNonEmptyString(nes);
		let $9 = i < 1;
		if ($9) {
			return Data_Maybe.Nothing.value;
		};
		return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.takeRight(i)(s)));
	};
};
let toChar = function ($23) {
	return Data_String_CodeUnits.toChar(fromNonEmptyString($23));
};
let toCharArray = function ($24) {
	return Data_String_CodeUnits.toCharArray(fromNonEmptyString($24));
};
let toNonEmptyCharArray = (function () {
	let $25 = Data_Maybe.fromJust();
	return function ($26) {
		return $25(Data_Array_NonEmpty.fromArray(toCharArray($26)));
	};
})();
let uncons = function (nes) {
	let s = fromNonEmptyString(nes);
	return {
		head: Data_String_Unsafe.charAt(0)(s),
		tail: Data_String_NonEmpty_Internal.fromString(Data_String_CodeUnits.drop(1)(s))
	};
};
let fromFoldable1 = function (dictFoldable1) {
	let $27 = Data_Semigroup_Foldable.fold1(dictFoldable1)(Data_String_NonEmpty_Internal.semigroupNonEmptyString);
	return function ($28) {
		return $27($28);
	};
};
let fromCharArray = function (v) {
	if (v.length === 0) {
		return Data_Maybe.Nothing.value;
	};
	return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.fromCharArray(v)));
};
let fromNonEmptyCharArray = (function () {
	let $29 = Data_Maybe.fromJust();
	return function ($30) {
		return $29(fromCharArray(Data_Array_NonEmpty.toArray($30)));
	};
})();
let dropWhile = function (f) {
	let $31 = liftS(Data_String_CodeUnits.dropWhile(f));
	return function ($32) {
		return Data_String_NonEmpty_Internal.fromString($31($32));
	};
};
let dropRight = function (i) {
	return function (nes) {
		let s = fromNonEmptyString(nes);
		let $11 = i >= Data_String_CodeUnits.length(s);
		if ($11) {
			return Data_Maybe.Nothing.value;
		};
		return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.dropRight(i)(s)));
	};
};
let drop = function (i) {
	return function (nes) {
		let s = fromNonEmptyString(nes);
		let $12 = i >= Data_String_CodeUnits.length(s);
		if ($12) {
			return Data_Maybe.Nothing.value;
		};
		return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.drop(i)(s)));
	};
};
let countPrefix = function ($33) {
	return liftS(Data_String_CodeUnits.countPrefix($33));
};
let cons = function (c) {
	return function (s) {
		return toNonEmptyString(Data_String_CodeUnits.singleton(c) + s);
	};
};
let charAt = function ($34) {
	return liftS(Data_String_CodeUnits.charAt($34));
};
module.exports = {
	fromCharArray: fromCharArray,
	fromNonEmptyCharArray: fromNonEmptyCharArray,
	singleton: singleton,
	cons: cons,
	snoc: snoc,
	fromFoldable1: fromFoldable1,
	toCharArray: toCharArray,
	toNonEmptyCharArray: toNonEmptyCharArray,
	charAt: charAt,
	toChar: toChar,
	indexOf: indexOf,
	"indexOf'": indexOf$prime,
	lastIndexOf: lastIndexOf,
	"lastIndexOf'": lastIndexOf$prime,
	uncons: uncons,
	length: length,
	take: take,
	takeRight: takeRight,
	takeWhile: takeWhile,
	drop: drop,
	dropRight: dropRight,
	dropWhile: dropWhile,
	countPrefix: countPrefix,
	splitAt: splitAt
};
