// Generated by purs version 0.13.6
"use strict";
let Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
let Data_Ord = require("../Data.Ord/index.js");
let Data_Ordering = require("../Data.Ordering/index.js");
let GenericOrd = function (genericCompare$prime) {
    this["genericCompare'"] = genericCompare$prime;
};
let genericOrdNoConstructors = new GenericOrd(function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
let genericOrdNoArguments = new GenericOrd(function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
let genericOrdArgument = function (dictOrd) {
    return new GenericOrd(function (v) {
        return function (v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
let genericCompare$prime = function (dict) {
    return dict["genericCompare'"];
};
let genericOrdConstructor = function (dictGenericOrd) {
    return new GenericOrd(function (v) {
        return function (v1) {
            return genericCompare$prime(dictGenericOrd)(v)(v1);
        };
    });
};
let genericOrdProduct = function (dictGenericOrd) {
    return function (dictGenericOrd1) {
        return new GenericOrd(function (v) {
            return function (v1) {
                let v2 = genericCompare$prime(dictGenericOrd)(v.value0)(v1.value0);
                if (v2 instanceof Data_Ordering.EQ) {
                    return genericCompare$prime(dictGenericOrd1)(v.value1)(v1.value1);
                };
                return v2;
            };
        });
    };
};
let genericOrdSum = function (dictGenericOrd) {
    return function (dictGenericOrd1) {
        return new GenericOrd(function (v) {
            return function (v1) {
                if (v instanceof Data_Generic_Rep.Inl && v1 instanceof Data_Generic_Rep.Inl) {
                    return genericCompare$prime(dictGenericOrd)(v.value0)(v1.value0);
                };
                if (v instanceof Data_Generic_Rep.Inr && v1 instanceof Data_Generic_Rep.Inr) {
                    return genericCompare$prime(dictGenericOrd1)(v.value0)(v1.value0);
                };
                if (v instanceof Data_Generic_Rep.Inl && v1 instanceof Data_Generic_Rep.Inr) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Generic_Rep.Inr && v1 instanceof Data_Generic_Rep.Inl) {
                    return Data_Ordering.GT.value;
                };
                throw new Error("Failed pattern match at Data.Generic.Rep.Ord (line 19, column 1 - line 23, column 41): " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
let genericCompare = function (dictGeneric) {
    return function (dictGenericOrd) {
        return function (x) {
            return function (y) {
                return genericCompare$prime(dictGenericOrd)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
            };
        };
    };
};
module.exports = {
    GenericOrd: GenericOrd,
    "genericCompare'": genericCompare$prime,
    genericCompare: genericCompare,
    genericOrdNoConstructors: genericOrdNoConstructors,
    genericOrdNoArguments: genericOrdNoArguments,
    genericOrdSum: genericOrdSum,
    genericOrdProduct: genericOrdProduct,
    genericOrdConstructor: genericOrdConstructor,
    genericOrdArgument: genericOrdArgument
};
